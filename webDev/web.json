{"posts":[{"file":"27_02_2023-aFewFlaskChapters.md","date":"27/02/2023","title":"# Covering a few chapters of the Flask Mega-Tutorial","content":"<h2 id=\"introduction\">Introduction</h2>\n<p>Alright, so a lot has happened over the past 2 weeks in web dev and I have gone through a few more chapters of <a href=\"https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world\">the Flask Mega-Tutorial</a>. This included the use of forms, creating a database, a login page and creating a user profile page.</p>\n<h2 id=\"formsuserlogin\">Forms &amp; User Login</h2>\n<p>The first thing that I did was create a form for the user to be able to login or create a profile. This was done by creating a form class in the <code>app/forms.py</code> file which looked like this:</p>\n<pre><code class=\"py language-py\">...\n\nclass LoginForm(FlaskForm):\n    # Create fields\n    # The validators are used to ensure that the data entered into the form is valid\n    username = StringField('Username', validators=[DataRequired()])\n    password = PasswordField('Password', validators=[DataRequired()])\n    remember_me = BooleanField('Remember Me')\n\n    # Create a submit button\n    submit = SubmitField('Sign In')\n\nclass RegistrationForm(FlaskForm):\n    # Create fields\n    # The validators are used to ensure that the data entered into the form is valid\n    username = StringField('Username', validators=[DataRequired()])\n    email = StringField('Email', validators=[DataRequired(), Email()])\n    password = PasswordField('Password', validators=[DataRequired()])\n    # Password 2 checks that the value is equal to the first password, and if not, it will raise an error\n    password2 = PasswordField(\n        'Repeat Password', validators=[DataRequired(), EqualTo('password')]\n    )\n    submit = SubmitField('Register')\n\n\n    # Custom validation methods for username and email, to check if they are already in use\n\n    def validate_username(self, username):\n        user = db.session.query(User).filter_by(username=username.data).first()\n        if user is not None:\n            raise ValidationError(\"Please use a different username.\")\n\n    def validate_email(self, email):\n        user = db.session.query(User).filter_by(email=email.data).first()\n        if user is not None:\n            raise ValidationError(\"Please use a different email address.\")\n</code></pre>\n<p>This was then used in the <code>app/templates/register.html</code> and <code>app/templates/login.html</code> pages to render the forms in a template extending the base template (as talked about 2 weeks ago)</p>\n<pre><code class=\"html language-html\">{% extends \"base.html\" %}\n\n{% block content %}\n&lt;h1&gt;Register&lt;/h1&gt;\n\n&lt;form action=\"\" method=\"post\"&gt;\n    {{ form.hidden_tag() }}\n    &lt;p&gt;\n        &lt;!-- Curly brackets indicate use of a variable --&gt;\n        {{ form.username.label }} &lt;br&gt;\n        {{ form.username(size=32) }} &lt;br&gt;\n        &lt;!-- If there's an error, show it --&gt;\n        {% for error in form.username.errors %}\n        &lt;span style=\"color: red\";&gt;[{{ error }}]&lt;/span&gt;\n        {% endfor %}\n    &lt;/p&gt;\n    &lt;p&gt;\n        &lt;!-- Curly brackets indicate use of a variable --&gt;\n        {{ form.email.label }} &lt;br&gt;\n        {{ form.email(size=64) }} &lt;br&gt;\n        &lt;!-- If there's an error, show it --&gt;\n        {% for error in form.email.errors %}\n        &lt;span style=\"color: red\";&gt;[{{ error }}]&lt;/span&gt;\n        {% endfor %}\n    &lt;/p&gt;\n    &lt;p&gt;\n        &lt;!-- Curly brackets indicate use of a variable --&gt;\n        {{ form.password.label }} &lt;br&gt;\n        {{ form.password(size=32) }} &lt;br&gt;\n        &lt;!-- If there's an error, show it --&gt;\n        {% for error in form.password.errors %}\n        &lt;span style=\"color: red\";&gt;[{{ error }}]&lt;/span&gt;\n        {% endfor %}\n    &lt;/p&gt;\n    &lt;p&gt;\n        &lt;!-- Curly brackets indicate use of a variable --&gt;\n        {{ form.password2.label }} &lt;br&gt;\n        {{ form.password2(size=32) }} &lt;br&gt;\n        &lt;!-- If there's an error, show it --&gt;\n        {% for error in form.password2.errors %}\n        &lt;span style=\"color: red\";&gt;[{{ error }}]&lt;/span&gt;\n        {% endfor %}\n    &lt;/p&gt;\n    &lt;p&gt;\n        {{ form.submit() }}\n    &lt;/p&gt;\n&lt;/form&gt;\n{% endblock %}\n</code></pre>\n<h2 id=\"database\">Database</h2>\n<p>The next thing that I did was create a database for the user to be able to store their information. This was done by creating a database class in the <code>app/models.py</code> file which looked like this:</p>\n<pre><code class=\"py language-py\">class User(UserMixin, db.Model):\n    # Create the columns for the database\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(64), index=True, unique=True)\n    email = db.Column(db.String(120), index=True, unique=True)\n    password_hash = db.Column(db.String(128))\n    posts = db.relationship('Post', backref='author', lazy='dynamic')\n    about_me = db.Column(db.String(140))\n    last_seen = db.Column(db.DateTime, default=datetime.utcnow)\n\n    # When printing the user object it will show the username in the form &lt;User {Username}&gt;\n    def __repr__(self):\n        return '&lt;User {}&gt;'.format(self.username)\n\n    def set_password(self, password):\n        # Generate secure password hash off of the password\n        self.password_hash = generate_password_hash(password)\n\n    def check_password(self, password):\n        # Check if the password matches the hash\n        return check_password_hash(self.password_hash, password)\n\n    def avatar(self, size):\n        # Grab the Gravatar link to the user's avatar based off of their email\n        digest = md5(self.email.lower().encode('utf-8')).hexdigest()\n        return \"https://www.gravatar.com/avatar/%s?d=identicon&amp;s=%s\" % (digest, size)\n</code></pre>\n<p>The user class was then applied to multiple areas of the site, in the login and register pages, where a user is created or queried from the database, and in the user profile page, where the user's information is displayed.</p>\n<h2 id=\"userprofile\">User Profile</h2>\n<p>The user profile page was created by creating a new route in the <code>app/routes.py</code> file which looked like this:</p>\n<pre><code class=\"py language-py\">@app.route('/user/&lt;username&gt;')\n@login_required\ndef user(username):\n    user = User.query.filter_by(username=username).first_or_404()\n    posts = [\n        {'author': user, 'body': 'Test post #1'},\n        {'author': user, 'body': 'Test post #2'}\n    ]\n    return render_template('user.html', user=user, posts=posts)\n</code></pre>\n<p>Now it's important to note 2 things here, those being the <code>@app.route('/user/&lt;username&gt;)</code> and the <code>@login_required</code> decorators. The first one is used to create a route that takes a variable, in this case the username, which means that it will go to the user page of a specified user for whichever user specified, and the second one is used to ensure that the user is logged in before they can access the page.</p>\n<p>The <code>first_or_404()</code> method is another interesting one and is used to return the first result from database for the user, or if there is no result, return a 404 error.</p>\n<p>The user page is then rendered, which looks like this:</p>\n<pre><code class=\"html language-html\">{% extends \"base.html\" %}\n\n{% block content %}\n&lt;table&gt;\n    &lt;tr valign=\"top\"&gt;\n        &lt;!-- Grab avatar from class --&gt;\n        &lt;td&gt;&lt;img src=\"{{ user.avatar(128) }}\"&gt;&lt;/td&gt;\n        &lt;td&gt;\n            &lt;h1&gt;User: {{ user.username }}&lt;/h1&gt;\n            &lt;!-- Check if variables exist, if so, show them --&gt;\n            {% if user.about_me %}&lt;p&gt;{{ user.about_me }}&lt;/p&gt;{% endif %}\n            {% if user.last_seen %}&lt;p&gt;Last seen on: {{ user.last_seen }}&lt;/p&gt;{% endif %}\n        &lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/table&gt;\n&lt;hr&gt;\n{% for post in posts %}\n&lt;!-- Use sub-templates for each post --&gt;\n{% include '_post.html' %}\n{% endfor %}\n{% endblock %}\n</code></pre>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>This week I learned a lot about how to use Flask to do some pretty interesting things, including to create and manage a lot of pages using templates, creating a database to store users and their information, and also creating forms which I can use to interact with a database, although not seeming the most secure in terms of SQL injection, but I'm sure there are ways to prevent this. Over the next few weeks I will be continuing to go through the Flask Mega-Tutorial, and also studying more server architectures besides the MVC, as I need to understand a few due to the upcoming exams where I will need to write about different server architectures and how effective they are. As usual, though, I will continue to post weekly on my progress and what I have learned.</p>","preview":"<h2 id=\"introduction\">Introduction</h2>\n<p>Alright, so a lot has happened over the past 2 weeks in web dev and I have gone through a few more chapters of <a href=\"https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world\">the Flask Mega-Tutorial</a>. This included the use of forms, creating a database, a login page and creating a user profile page.</p>\n<h2 id=\"formsuserlogin\">Forms &amp; User Login</h2>\n<p>The first thing that I did was create a form for the user to be a","id":"aFewFlaskChapters"},{"file":"20_02_2023-CyberSecurityPrac.md","date":"20/02/2023","title":"# Cyber Security Practice","content":"<h2 id=\"introduction\">Introduction</h2>\n<p>As you may or may not know, I love cyber security, and with the upcoming Lockheed Martin Cyberquest competition (and the Year 11s being on their camp) the Year 12s had the class to themselves, and so we decided to do some practice in cyber security.</p>\n<h2 id=\"overview\">Overview</h2>\n<p>We had talked previously about the best places to go in order to practice the skills required for the competition, and so we decided to go with <a href=\"https://picoctf.org/\">PicoCTF</a>. We had previously done a few of the challenges on there, that being last year in the pracice day for the PeCan+ competition, and so we decided to do some more practice in some of the other areas and strategise our attack for CyberQuest, which involved each member of our team specialising in a specific area for the cyber security questions such as web, crypto, forensics, etc.</p>\n<h2 id=\"thechallenges\">The Challenges</h2>\n<h3 id=\"notrunningthroughthemhere\">(Not running through them here)</h3>\n<p>In the lesson though, we looked into forensics specifically and how people hid files in files and the bytes in headers and such to hide data and files. There were 3 challenges that we did in the lesson, those being (and I'll link the writeups for them here):</p>\n<ul>\n<li><p><a href=\"https://vivian-dai.github.io/PicoCTF2021-Writeup/Forensics/information/information.html\">information</a></p></li>\n<li><p><a href=\"https://vivian-dai.github.io/PicoCTF2021-Writeup/Forensics/Matryoshka%20doll/Matryoshka%20doll.html\">Matryoshka doll</a></p></li>\n<li><p><a href=\"https://vivian-dai.github.io/PicoCTF2021-Writeup/Forensics/tunn3l%20v1s10n/tunn3l%20v1s10n.html\">tunn3l v1s10n</a></p></li>\n</ul>\n<p>I won't go into these much, as I don't want to spoil them for those who want to do them, but I can say that for forensics, looking into the hex data is extremely useful for finding hidden data and files, as you can see the literal bytes of data that the files are made up from and see what each of these mean (including the useful iend byte to indicate the end of the file, where you can hide more data afterwards). The other issue is that I have no images or code saved on my computer for the challenges, as we did them as a class, brainstorming different methods of attacking the problem, and when we couldn't get it, using the writeups to help us through the final seteps we didn't get in the end.</p>\n<h2 id=\"reflection\">Reflection</h2>\n<p>We had a good go at all of the challenges, and I think we did pretty well, although we weren't able to get those last few steps to get the flag, so we had to look to the writeups to get the final steps and gain a better understanding of the different concepts required to complete the challenges. I think that this was a good practice for the competition, and I believe that we will be able to do well in the competition as long as we keep practicing, as the practice was able to show us that we aren't at an optimal level of skill yet, and so we need to keep practicing to get to that level.</p>\n<p>To reflect back; although we didn't do that much outside of the cyber security challenges during the web dev lessons, we were able to get a great understanding of a few of the useful concepts in cyber sec that will aid me in the upcoming competition and hopefully in the future as well if I can continue the pursuit of cyber security as a career.</p>","preview":"<h2 id=\"introduction\">Introduction</h2>\n<p>As you may or may not know, I love cyber security, and with the upcoming Lockheed Martin Cyberquest competition (and the Year 11s being on their camp) the Year 12s had the class to themselves, and so we decided to do some practice in cyber security.</p>\n<h2 id=\"overview\">Overview</h2>\n<p>We had talked previously about the best places to go in order to practice the skills required for the competition, and so we decided to go with <a href=\"https://pico","id":"CyberSecurityPrac"},{"file":"13_02_2023-IntroToFlask.md","date":"13/02/2023","title":"# Intro to Flask & the MVC","content":"<h2 id=\"whatisthemvc\">What is the MVC?</h2>\n<p>The MVC model has three parts:</p>\n<ul>\n<li>Model</li>\n<li>View</li>\n<li>Controller</li>\n</ul>\n<p>But what are these three parts?</p>\n<h3 id=\"model\">Model</h3>\n<p>The model is the data that is stored by the application, such as users and items. This is the data that will be manipulated by the application and displayed to the user.</p>\n<h3 id=\"view\">View</h3>\n<p>The view is the front end of the website. This includes the HTML, CSS and JavaScript that a website holds.</p>\n<h3 id=\"controller\">Controller</h3>\n<p>The controller is the web server for the application, it's responsible for processing the user's requests and returning the appropriate data to the view.</p>\n<h2 id=\"whatisflask\">What is Flask?</h2>\n<p>Flask is one of the most popular web frameworks for Python. It's used to create both the front end and back end for a website acting as the controller in an MVC model. It handles the requests made and can be programmed to send back different response pages, such as a 404 page.</p>\n<p>It can also deal with template pages, using blocks of html that can be reused across multiple pages or slotted into existing pages.</p>\n<h2 id=\"anoverviewoftheweek\">An overview of the week</h2>\n<p>Over the week I looked into the MVC model and how it works. I also looked into Flask and how it can be used to create a web application. I looked into how to create a basic Flask application and how to use the Jinja templating engine to create template pages. I got a brief understanding of how Flask works internally, but a greater understanding of how to use flask to create a web page. This experience and knowledge will help me in future to create more complex web applications.</p>\n<p>To create a basic flask app, I started following <a href=\"https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world\">this mega tutorial</a>. At the beginning we went through the initial setup of a flask application where we created an <code>__init__</code>:</p>\n<pre><code class=\"python language-python\">from flask import Flask\nfrom config import Config\n\napp = Flask(__name__)\napp.config.from_object(Config)\n\nfrom app import routes\n</code></pre>\n<p>this references the routes file which contains the routes for the application, such as when someone goes to any specific page. This is where the controller part of the MVC comes in, as it handles the request, returning the appropriate response.</p>\n<pre><code class=\"py language-py\">from app import app\nfrom flask import render_template\nfrom app.forms import LoginForm\n\n# Set the suffixes/pages\n@app.route('/')\n@app.route('/index')\ndef index():\n    # Temp Data\n    user = {'username': 'User123'}\n    posts = [\n        {\n            'author': {'username': 'John'},\n            'body': 'Beautiful day in Portland!'\n        },\n        {\n            'author': {'username': 'Susan'},\n            'body': 'The Avengers movie was so cool!'\n        }\n    ]\n    # Generate the page, filling in a template\n    return render_template('index.html', title='Home', user=user, posts=posts)\n\n@app.route('/login')\ndef login():\n    form = LoginForm()\n    return render_template('base.html', title='Sign In', form=form)\n</code></pre>\n<p>The referenced template for the login form, 'base.html' is written in html and uses the Jinja template format to fill in the form:</p>\n<pre><code class=\"html language-html\">&lt;!doctype html&gt;\n&lt;html&gt;\n\n&lt;head&gt;\n    &lt;!-- Statements that aren't inputting variables (Which uses { var })\n        use {\\%  %} such as if statements and loops --&gt;\n    {% if title %}\n    &lt;title&gt;{{ title }} - Microblog&lt;/title&gt;\n    {% else %}\n    &lt;title&gt;Welcome to Microblog&lt;/title&gt;\n    {% endif %}\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;div&gt;\n        Microblog: \n        &lt;a href=\"/index\"&gt;Home&lt;/a&gt;\n        &lt;a href=\"/login\"&gt;Login&lt;/a&gt;\n    &lt;/div&gt;\n    &lt;hr&gt;\n    &lt;!-- Blocks use templates to fill in information, \n        usually from another file extending this template and defining the block --&gt;\n    {% block content %}{% endblock %}\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n<p>This is a very basic example of how flask works, but it shows how the controller part of the MVC works. It handles the request and returns the appropriate response, in this case the webpage. It's quite a simple process but can be used to create more complex web applications than just using HTML, CSS and JavaScript like I did last year.</p>\n<h2 id=\"whatnext\">What next?</h2>\n<p>In the coming weeks I will be continuing through the mega tutorial which will continue to teach me about the MVC model and how I can use Flask to create a web application which I can use for my final year project. I believe that I need to put in a bit more work for Flask outside of class to get a better understanding of how it works and how I can use it to create a better web application or website.</p>\n<h2 id=\"reflection\">Reflection</h2>\n<p>This week in Web Dev was quite interesting looking into the MVC model and Flask. I stayed on topic for most of the week with a few chats with the Year 12s and lending a hand to a few Year 11s. I think I am putting in the effort in this subject, but I noticed a little bit through the week that I was focusing more on Data Science, following last year's habit, but I pulled myself back on track and got back into the Web Dev work. Next week I will continue to work through the tutorial to get myself to a level where I can create my own projects using Flask and be able to use the knowledge for my final project.</p>","preview":"<h2 id=\"whatisthemvc\">What is the MVC?</h2>\n<p>The MVC model has three parts:</p>\n<ul>\n<li>Model</li>\n<li>View</li>\n<li>Controller</li>\n</ul>\n<p>But what are these three parts?</p>\n<h3 id=\"model\">Model</h3>\n<p>The model is the data that is stored by the application, such as users and items. This is the data that will be manipulated by the application and displayed to the user.</p>\n<h3 id=\"view\">View</h3>\n<p>The view is the front end of the website. This includes the HTML, CSS and JavaScript t","id":"IntroToFlask"}]}